# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import proto.hvac_service_pb2 as hvac__service__pb2


class HVACServiceStub(object):
    """*
    @brief

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SetTemperature = channel.unary_unary(
                '/hvac_service.v1.HVACService/SetTemperature',
                request_serializer=hvac__service__pb2.SetTemperatureRequestMsg.SerializeToString,
                response_deserializer=hvac__service__pb2.SetTemperatureResponseMsg.FromString,
                )
        self.On = channel.unary_unary(
                '/hvac_service.v1.HVACService/On',
                request_serializer=hvac__service__pb2.OnMsg.SerializeToString,
                response_deserializer=hvac__service__pb2.OnResponse.FromString,
                )
        self.Off = channel.unary_unary(
                '/hvac_service.v1.HVACService/Off',
                request_serializer=hvac__service__pb2.OffMsg.SerializeToString,
                response_deserializer=hvac__service__pb2.OffResponse.FromString,
                )


class HVACServiceServicer(object):
    """*
    @brief

    """

    def SetTemperature(self, request, context):
        """Set Temperature 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def On(self, request, context):
        """On Method call 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Off(self, request, context):
        """Off Method call 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_HVACServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SetTemperature': grpc.unary_unary_rpc_method_handler(
                    servicer.SetTemperature,
                    request_deserializer=hvac__service__pb2.SetTemperatureRequestMsg.FromString,
                    response_serializer=hvac__service__pb2.SetTemperatureResponseMsg.SerializeToString,
            ),
            'On': grpc.unary_unary_rpc_method_handler(
                    servicer.On,
                    request_deserializer=hvac__service__pb2.OnMsg.FromString,
                    response_serializer=hvac__service__pb2.OnResponse.SerializeToString,
            ),
            'Off': grpc.unary_unary_rpc_method_handler(
                    servicer.Off,
                    request_deserializer=hvac__service__pb2.OffMsg.FromString,
                    response_serializer=hvac__service__pb2.OffResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'hvac_service.v1.HVACService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class HVACService(object):
    """*
    @brief

    """

    @staticmethod
    def SetTemperature(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/hvac_service.v1.HVACService/SetTemperature',
            hvac__service__pb2.SetTemperatureRequestMsg.SerializeToString,
            hvac__service__pb2.SetTemperatureResponseMsg.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def On(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/hvac_service.v1.HVACService/On',
            hvac__service__pb2.OnMsg.SerializeToString,
            hvac__service__pb2.OnResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Off(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/hvac_service.v1.HVACService/Off',
            hvac__service__pb2.OffMsg.SerializeToString,
            hvac__service__pb2.OffResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
