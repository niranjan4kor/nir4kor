# /********************************************************************************
# * Copyright (c) 2021 Contributors to the Eclipse Foundation
# *
# * See the NOTICE file(s) distributed with this work for additional
# * information regarding copyright ownership.
# *
# * This program and the accompanying materials are made available under the
# * terms of the Eclipse Public License 2.0 which is available at
# * http://www.eclipse.org/legal/epl-2.0
# *
# * SPDX-License-Identifier: EPL-2.0
# ********************************************************************************/

name: CI workflow

on:
  workflow_dispatch:
  push:
    # Run only on branches/commits and not tags
    branches:
      - '**'
  pull_request:
    branches:
      - main

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    name: Run unit tests

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Clone actions repository 
        uses: actions/checkout@v2
        with:
          repository: SoftwareDefinedVehicle/release-documentation-action
          ssh-key: ${{ secrets.RELEASE_DOC_ACTION_PRIVATE_KEY }}
          path: "./.github/actions"

      - name: Install Dapr
        uses: dapr/setup-dapr@v1
        with:
          version: "1.4.0"

      - name: Initialize Dapr
        shell: pwsh
        run: |
          Write-Output "::group::dapr init"
          dapr init
          Write-Output "::endgroup::"
          dapr --version

      - name: Initialize vehicleApp projects
        shell: pwsh
        run: |
          Write-Output "::group::Initialize vehicleApp"
          Import-Module ./.sdv/Sdv.psm1 -Force
          Find-SdvVehicleApp | Get-SdvComponent | Initialize-SdvComponent -Verbose
          Write-Output "::endgroup::"

      - name: Start mqtt
        shell: bash
        run: docker run -d -p 1883:1883 -p 9001:9001 eclipse-mosquitto:1.6.9

      - name: unit test
        shell: bash
        run: |
          pip install pytest pytest-cov coverage2clover 
          pip install coveragepy-lcov --no-warn-conflicts
          pytest --rootdir . --override-ini junit_family=xunit1 --junit-xml=./.sdv/tmp/UnitTest/junit.xml --cov ./src --cov-report=xml:.sdv/tmp/CodeCoverage/cobertura-coverage.xml --cov-branch ./src --cov-config=setup.cfg    
          coverage2clover -i .sdv/tmp/CodeCoverage/cobertura-coverage.xml -o .sdv/tmp/CodeCoverage/clover.xml
          coveragepy-lcov --data_file_path ./.coverage --output_file_path .sdv/tmp/CodeCoverage/lcov.info

      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v1
        if: always()
        with:
          files: ./.sdv/tmp/UnitTest/junit.xml

      - name: Add code coverage comment to pr
        uses: romeovs/lcov-reporter-action@v0.2.21
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          lcov-file: .sdv/tmp/CodeCoverage/lcov.info

      - name: Package unit test files
        uses: ./.github/actions/package
        with:
          name: "UnitTest"
          type: "UnitTest"
          schema: "JUnit"
          sourcePath: ./.sdv/tmp/UnitTest/junit.xml
          packagePath: ./.sdv/tmp/Documentation/renderer

      - name: Package code coverage files
        uses: ./.github/actions/package
        with:
          name: "CodeCoverage"
          type: "CodeCoverage"
          schema: "Cobertura"
          sourcePath: .sdv/tmp/CodeCoverage
          packagePath: .sdv/tmp/Documentation/renderer

      - name: Upload test results as artifacts
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: 'test-results'
          path: |
            .sdv/tmp/Documentation/renderer/*

      - name: Checking unit test code coverage
        id: test-coverage
        uses: johanvanhelden/gha-clover-test-coverage-check@v1
        with:
          percentage: "45"
          filename: ".sdv/tmp/CodeCoverage/clover.xml"

  initialize-matrix:
      runs-on: ubuntu-latest
      name: Setting up build matrix
      outputs:
        deployment-matrix: ${{ steps.export-deployment-matrix.outputs.deployment-matrix }}
 
      steps:
      - name: Checkout repository
        uses: actions/checkout@v2   

      - name: Get matrix data
        id: export-deployment-matrix
        shell: pwsh
        run: |
          Import-Module ./.sdv/Sdv.psm1 -Force
          $MatrixJson = Find-SdvVehicleApp | Get-SdvComponent | ConvertTo-Json -Compress
          Write-Output "::set-output name=deployment-matrix::$MatrixJson"

  build-images:
      name: "Building image (${{ matrix.component.Name }})"
      runs-on: ubuntu-latest
      #needs: [initialize-matrix, build-base-images]
      needs: initialize-matrix
      strategy: 
        matrix: 
          component: ${{ fromJson(needs.initialize-matrix.outputs.deployment-matrix) }}

      steps:
      - name: Checkout repository
        uses: actions/checkout@v2      

      - name: Clone actions repository 
        uses: actions/checkout@v2
        with:
          repository: SoftwareDefinedVehicle/release-documentation-action
          ssh-key: ${{ secrets.RELEASE_DOC_ACTION_PRIVATE_KEY }}
          path: "./.github/actions"

      - name: Check Docker version
        run: docker --version    

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - id: github-repository-name-case-adjusted
        name: Prepare repository name in lower case for docker upload. This supports repository names in mixed case
        uses: ASzc/change-string-case-action@v1
        with:
          string: ${{ github.repository }}

      - name: "${{ matrix.component.Name }} -- Build multi-arch image"
        id: image_build
        uses: docker/build-push-action@v2
        with:
          pull: true
          push: false
          outputs: |
            type=oci,dest=./seatadjuster-${{ matrix.component.Name }}.tar
          context: ${{ matrix.component.DockerFolder }}
          file: ${{ matrix.component.Folder }}/Dockerfile
          platforms: linux/amd64,linux/aarch64
          labels: |
            org.opencontainers.image.source=https://github.com/${{steps.github-repository-name-case-adjusted.outputs.lowercase}}

      - name: "${{ matrix.component.Name }} -- Inspect tar image with skopeo"
        run: |
          skopeo inspect --raw oci-archive:seatadjuster-${{ matrix.component.Name }}.tar | jq
          skopeo inspect oci-archive:seatadjuster-${{ matrix.component.Name }}.tar
          skopeo copy oci-archive:seatadjuster-${{ matrix.component.Name }}.tar docker-archive:seatadjuster-${{ matrix.component.Name }}-arch.tar

      - name: "${{ matrix.component.Name }} -- Scan docker image for vulnerabilities"
        uses: aquasecurity/trivy-action@master
        with:
          input: seatadjuster-${{ matrix.component.Name }}-arch.tar
          exit-code: '1'
          ignore-unfixed: true
          #severity: 'CRITICAL,HIGH'
          format: 'template'
          template: '@.sdv/junit.tpl'
          output: 'junit.xml'      

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        if: ${{ always() && steps.image_build.outcome == 'success' }}
        with:
          input: seatadjuster-${{ matrix.component.Name }}-arch.tar
          exit-code: '1'
          ignore-unfixed: true
          #severity: 'CRITICAL,HIGH'
          format: 'template'
          template: '@/contrib/sarif.tpl'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v1
        if: always() 
        with:
          sarif_file: 'trivy-results.sarif'


      - name: "${{ matrix.component.Name }} -- Show scan results"
        if: ${{ always() }}
        run: cat ./junit.xml

      - name: "${{ matrix.component.Name }} -- Package vulnerability scan files"
        uses: ./.github/actions/package
        with:
          name: "VulnerabilityScan-${{ matrix.component.Name }}"
          type: "VulnerabilityScan"
          schema: "JUnit"
          sourcePath: ./junit.xml
          packagePath: .sdv/Documentation/renderer

      - name: "${{ matrix.component.Name }} -- Upload trivy report as artifacts"
        if: ${{ always() && steps.image_build.outcome == 'success' }}
        uses: actions/upload-artifact@v2
        with:
          name: test-results
          path: |
            .sdv/Documentation/renderer/*

      - name: "${{ matrix.component.Name }} -- Publish Trivy Scan Results"
        uses: EnricoMi/publish-unit-test-result-action@v1
        if: ${{ always() && steps.image_build.outcome == 'success' }}
        with:
          check_name: Trivy Scan Results (${{ matrix.component.Name }})
          comment_title: Trivy Scan Results (${{ matrix.component.Name }})
          files: ./junit.xml          

      - name: "${{ matrix.component.Name }} -- Push image to ghcr"
        if: ${{ steps.image_build.outcome == 'success' }}
        env:
          VAPP_NAME: ${{ matrix.component.Name }}
          VAPP_VERSION: ${{ github.sha }}
          GIT_HUB_REPOSITORY_NAME_LOWER_CASE: ${{ steps.github-repository-name-case-adjusted.outputs.lowercase }}
        shell: bash
        run: |
          skopeo copy --all oci-archive:seatadjuster-${{ matrix.component.Name }}.tar "docker://ghcr.io/$GIT_HUB_REPOSITORY_NAME_LOWER_CASE/$VAPP_NAME:$VAPP_VERSION"
          skopeo inspect --raw "docker://ghcr.io/$GIT_HUB_REPOSITORY_NAME_LOWER_CASE/$VAPP_NAME:$VAPP_VERSION" | jq
          skopeo inspect "docker://ghcr.io/$GIT_HUB_REPOSITORY_NAME_LOWER_CASE/$VAPP_NAME:$VAPP_VERSION"

  integration-tests:
    runs-on: ubuntu-latest
    name: Integration Tests
    needs: [build-images, unit-tests]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2  

      - name: Clone actions repository 
        uses: actions/checkout@v2
        with:
          repository: SoftwareDefinedVehicle/release-documentation-action
          ssh-key: ${{ secrets.RELEASE_DOC_ACTION_PRIVATE_KEY }}
          path: "./.github/actions"

      - name: Install Dapr
        uses: dapr/setup-dapr@v1
        with:
          version: "1.4.0"

      - name: Initialize Dapr
        shell: pwsh
        run: |
          Write-Output "::group::dapr init"
          dapr init  --runtime-version 1.4.0
          Write-Output "::endgroup::"
          dapr --version

      - name: Initialize vehicleApp projects
        shell: pwsh
        run: |
          Write-Output "::group::Initialize vehicleApp"
          Import-Module ./.sdv/Sdv.psm1 -Force
          Find-SdvVehicleApp | Get-SdvComponent | Initialize-SdvComponent -Verbose
          Write-Output "::endgroup::"

      - name: Start mqtt
        shell: bash
        run: docker run -d -p 1883:1883 -p 9001:9001 eclipse-mosquitto:1.6.9          

      - name: Test SeatAdjuster vehicleApp 
        shell: pwsh
        run: ./IntegrationTests/Test-SdvVehicleApp.ps1     

      - name: Publish Integration Test Results
        uses: EnricoMi/publish-unit-test-result-action@v1
        if: always()
        with:
          files: .sdv/tmp/IntegrationTest/junit.xml   
          check_name: Integration Test Results     
          fail_on: "test failures"

      - name: Package integration test result files
        uses: ./.github/actions/package
        with:
          name: "IntegrationTest"
          type: "IntegrationTest"
          schema: "JUnit"
          sourcePath: .sdv/tmp/IntegrationTest
          packagePath: .sdv/tmp/Documentation/renderer        
          
      - name: Upload test results as artifacts
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: 'test-results'
          path: |
            .sdv/tmp/Documentation/renderer/*          