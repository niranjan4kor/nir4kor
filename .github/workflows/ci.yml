# /********************************************************************************
# * Copyright (c) 2021 Contributors to the Eclipse Foundation
# *
# * See the NOTICE file(s) distributed with this work for additional
# * information regarding copyright ownership.
# *
# * This program and the accompanying materials are made available under the
# * terms of the Eclipse Public License 2.0 which is available at
# * http://www.eclipse.org/legal/epl-2.0
# *
# * SPDX-License-Identifier: EPL-2.0
# ********************************************************************************/

name: CI workflow

on:
  workflow_dispatch:
  push:
    # Run only on branches/commits and not tags
    branches:
      - main
  pull_request:
    branches:
      - main
    paths-ignore:
    - "**/*.md"

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    name: Run unit tests and linters

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}

      - name: Clone Release Documentation Action repository
        uses: actions/checkout@v2
        with:
          repository: SoftwareDefinedVehicle/release-documentation-action
          ssh-key: ${{ secrets.RELEASE_DOC_ACTION_PRIVATE_KEY }}
          path: "./.github/actions"

      - uses: fusion-engineering/setup-git-credentials@v2
        with:
          credentials: https://swd9be:${{ secrets.SDV_GITHUB_AUTOMATION_TOKEN }}@github.com/

      - name: Setup git config
        shell: bash
        run: |
          git config --global user.email "github-automation@users.noreply.github.com"
          git config --global user.name "Github Automation"

      - name: Install Dapr
        uses: dapr/setup-dapr@v1
        with:
          version: "1.4.0"

      - name: Initialize Dapr
        shell: pwsh
        run: |
          Write-Output "::group::dapr init"
          dapr init
          Write-Output "::endgroup::"
          dapr --version

      - name: Install required packages
        shell: pwsh
        run: |
          pip install -r requirements.txt
          pip install -r src/requirements-sdv.txt
          pip install -r test/requirements.txt

      - name: Start mqtt
        shell: bash
        run: docker run -d -p 1883:1883 -p 9001:9001 eclipse-mosquitto:1.6.9

      - name: Run Linters
        uses: pre-commit/action@v2.0.3
        with:
          token: ${{ secrets.SDV_GITHUB_AUTOMATION_TOKEN }}

      - name: unit test
        shell: bash
        run: |
          pip install pytest pytest-cov coverage2clover
          pip install coveragepy-lcov --no-warn-conflicts
          pytest --rootdir . --override-ini junit_family=xunit1 --junit-xml=./results/UnitTest/junit.xml --cov ./src --cov-report=xml:results/CodeCoverage/cobertura-coverage.xml --cov-branch ./src --cov-config=setup.cfg
          coverage2clover -i results/CodeCoverage/cobertura-coverage.xml -o results/CodeCoverage/clover.xml
          coveragepy-lcov --data_file_path ./.coverage --output_file_path results/CodeCoverage/lcov.info

      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v1
        if: always()
        with:
          files: ./results/UnitTest/junit.xml

      - name: Add code coverage comment to pr
        uses: romeovs/lcov-reporter-action@v0.3.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          lcov-file: results/CodeCoverage/lcov.info
          delete-old-comments: true
        if: github.event_name == 'pull_request'

      - name: Package unit test files
        uses: ./.github/actions/package
        with:
          name: "UnitTest"
          type: "UnitTest"
          schema: "JUnit"
          sourcePath: ./results/UnitTest/junit.xml
          packagePath: ./results/Documentation/renderer

      - name: Package code coverage files
        uses: ./.github/actions/package
        with:
          name: "CodeCoverage"
          type: "CodeCoverage"
          schema: "Cobertura"
          sourcePath: results/CodeCoverage
          packagePath: results/Documentation/renderer

      - name: Upload test results as artifacts
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: 'test-results'
          path: |
            results/Documentation/renderer/*

      - name: Checking unit test code coverage
        id: test-coverage
        uses: johanvanhelden/gha-clover-test-coverage-check@v1
        with:
          percentage: "20"
          filename: "results/CodeCoverage/clover.xml"

  initialize-matrix:
      runs-on: ubuntu-latest
      name: Setting up build matrix
      outputs:
        deployment-matrix: ${{ steps.export-deployment-matrix.outputs.deployment-matrix }}

      steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Get matrix data
        id: export-deployment-matrix
        run: |
          SITE_PACKAGES=$(python -m site --user-site)
          sed -i "s|SITE_PACKAGES|$SITE_PACKAGES|g" ./vehicleApp.json
          MATRIX=$(cat ./vehicleApp.json | tr '\n' ' ')

          echo "::set-output name=deployment-matrix::$MATRIX"

  build-images:
      name: "Building image (${{ matrix.component.Name }})"
      runs-on: ubuntu-latest
      needs: [initialize-matrix]
      strategy:
        matrix:
          component: ${{ fromJson(needs.initialize-matrix.outputs.deployment-matrix) }}

      steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Clone Release Documentation Action repository
        uses: actions/checkout@v2
        with:
          repository: SoftwareDefinedVehicle/release-documentation-action
          ssh-key: ${{ secrets.RELEASE_DOC_ACTION_PRIVATE_KEY }}
          path: "./.github/actions"

      - name: Check Docker version
        run: docker --version

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - id: github-repository-name-case-adjusted
        name: Prepare repository name in lower case for docker upload. This supports repository names in mixed case
        uses: ASzc/change-string-case-action@v1
        with:
          string: ${{ github.repository }}

      - uses: fusion-engineering/setup-git-credentials@v2
        with:
          credentials: https://swd9be:${{ secrets.SDV_GITHUB_AUTOMATION_TOKEN }}@github.com/

      - name: Setup git config
        shell: bash
        run: |
          git config --global user.email "github-automation@users.noreply.github.com"
          git config --global user.name "Github Automation"

      - name: "${{ matrix.component.Name }} -- Build multi-arch image"
        id: image_build
        uses: docker/build-push-action@v2
        with:
          pull: true
          push: false
          outputs: |
            type=oci,dest=./${{ matrix.component.Name }}.tar
          context: ${{ matrix.component.DockerFolder }}
          file: ${{ matrix.component.Folder }}/Dockerfile
          platforms: linux/amd64,linux/aarch64
          secrets: |
            "github_token=swd9be:${{ secrets.SDV_GITHUB_AUTOMATION_TOKEN }}"
          labels: |
            org.opencontainers.image.source=https://github.com/${{steps.github-repository-name-case-adjusted.outputs.lowercase}}

      - name: "${{ matrix.component.Name }} -- Inspect tar image with skopeo"
        run: |
          skopeo inspect --raw oci-archive:${{ matrix.component.Name }}.tar | jq
          skopeo inspect oci-archive:${{ matrix.component.Name }}.tar
          skopeo copy oci-archive:${{ matrix.component.Name }}.tar docker-archive:${{ matrix.component.Name }}-arch.tar

      - name: "${{ matrix.component.Name }} -- Scan docker image for vulnerabilities"
        uses: aquasecurity/trivy-action@0.0.18
        with:
          input: ${{ matrix.component.Name }}-arch.tar
          exit-code: '0'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
          format: 'template'
          template: '@scripts/junit.tpl'
          output: 'junit.xml'

      - name: "${{ matrix.component.Name }} -- Show scan results"
        if: ${{ always() }}
        run: cat ./junit.xml

      - name: "${{ matrix.component.Name }} -- Package vulnerability scan files"
        uses: ./.github/actions/package
        with:
          name: "VulnerabilityScan-${{ matrix.component.Name }}"
          type: "VulnerabilityScan"
          schema: "JUnit"
          sourcePath: ./junit.xml
          packagePath: results/Documentation/renderer

      - name: "${{ matrix.component.Name }} -- Upload trivy report as artifacts"
        if: ${{ always() && steps.image_build.outcome == 'success' }}
        uses: actions/upload-artifact@v2
        with:
          name: test-results
          path: |
            results/Documentation/renderer/*

      - name: "${{ matrix.component.Name }} -- Publish Trivy Scan Results"
        uses: EnricoMi/publish-unit-test-result-action@v1
        if: ${{ always() && steps.image_build.outcome == 'success' }}
        with:
          check_name: Trivy Scan Results (${{ matrix.component.Name }})
          comment_title: Trivy Scan Results (${{ matrix.component.Name }})
          fail_on: "errors"
          files: ./junit.xml

      - name: "${{ matrix.component.Name }} -- Push image to ghcr"
        if: ${{ steps.image_build.outcome == 'success' }}
        env:
          VAPP_NAME: ${{ matrix.component.Name }}
          VAPP_VERSION: ${{ github.sha }}
          GIT_HUB_REPOSITORY_NAME_LOWER_CASE: ${{ steps.github-repository-name-case-adjusted.outputs.lowercase }}
        shell: bash
        run: |
          skopeo copy --all oci-archive:${{ matrix.component.Name }}.tar "docker://ghcr.io/$GIT_HUB_REPOSITORY_NAME_LOWER_CASE/$VAPP_NAME:$VAPP_VERSION"
          skopeo inspect --raw "docker://ghcr.io/$GIT_HUB_REPOSITORY_NAME_LOWER_CASE/$VAPP_NAME:$VAPP_VERSION" | jq
          skopeo inspect "docker://ghcr.io/$GIT_HUB_REPOSITORY_NAME_LOWER_CASE/$VAPP_NAME:$VAPP_VERSION"

  run-integration-tests:
    name: Run Integration Tests
    runs-on: ubuntu-latest
    needs: build-images
    steps:
      - uses: actions/checkout@v2

      - name: Clone Release Documentation Action repository
        uses: actions/checkout@v2
        with:
          repository: SoftwareDefinedVehicle/release-documentation-action
          ssh-key: ${{ secrets.RELEASE_DOC_ACTION_PRIVATE_KEY }}
          path: "./.github/actions"

      - uses: fusion-engineering/setup-git-credentials@v2
        with:
          credentials: https://swd9be:${{ secrets.SDV_GITHUB_AUTOMATION_TOKEN }}@github.com/

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: "PAT"
          password: ${{ secrets.SDV_GITHUB_AUTOMATION_TOKEN }}

      - name: Update preinstalled Python version
        working-directory: .
        run: ./.devcontainer/scripts/add-python.sh

      - name: Install required packages
        shell: pwsh
        run: |
          pip install -r ./src/requirements.txt
          pip install -r ./src/requirements-sdv.txt
          pip install -r ./test/requirements.txt

      - name: Install K3D and prerequisites
        working-directory: ./deploy/runtime/k3d
        run: ./01_install-k3d.sh

      - name: Configure K3D cluster
        working-directory: ./deploy/runtime/k3d
        run: ./02_configure-k3d.sh

      - name: Install prerequisite containers in K3D cluster
        working-directory: ./deploy/runtime/k3d
        run: ./04_deployprerequisites.sh

      - id: github-repository-name-case-adjusted
        name: Prepare repository name in lower case for docker upload. This supports repository names in mixed case
        uses: ASzc/change-string-case-action@v1
        with:
          string: ${{ github.repository }}

      - name: Deploy images
        env:
          REPO_NAME: ${{ steps.github-repository-name-case-adjusted.outputs.lowercase }}
          SHA: ${{ github.sha }}
        working-directory: ./deploy/runtime/k3d
        run: ./deploy_imagefromghcr.sh

      - name: Run Python integration tests
        shell: bash
        env:
          VDB_PORT: 30555
          MQTT_PORT: 31883
        run: |
          pip install pytest pytest-ordering pytest-asyncio
          pip install -r test/requirements.txt
          pytest ./test --override-ini junit_family=xunit1 --junit-xml=./results/IntTest/junit.xml

      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v1
        if: always()
        with:
          files: ./results/IntTest/junit.xml

      - name: Package integration test result files
        uses: ./.github/actions/package
        with:
          name: "IntegrationTest"
          type: "UnitTest"
          schema: "JUnit"
          sourcePath: ./results/IntTest/junit.xml
          packagePath: ./results/Documentation/renderer

      - name: Upload integration test results as artifacts
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: 'test-results'
          path: |
            results/Documentation/renderer/*
